package Portal2D;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

public class Block {
	int x,y,width,height;
	int time = 0;
	int gifcounter = 0;
	boolean portalable = true;
	Blocktype special = Blocktype.Normal; // is an enum instead of null to avoid nullPointerExceptions
	Buttontype type = Buttontype.Normal;
	Color color = Colors.lightGrey;
	public boolean isOnButton = false;
	boolean upright;
	BufferedImage[] lavagif = new BufferedImage[25];
	BufferedImage walltexture;
	BufferedImage[] buttontetexture = new BufferedImage[2];
	BufferedImage finish;
	
	public void Lava(int x,int y) {
		this.x = x;
		this.y = y;

		try {
			for (int i=0;i<25;i++) {
				lavagif[i] = ImageIO.read(new File("Resources/Images/lava met bellengif Als "+Integer.toString(i+1)+"e.png"));
			
			}
			} catch(IOException ex) {
			System.out.println("gif load failed: lava");
		}
		
	}
	
	public void Texture1(int x,int y) {
		this.x = x;
		this.y = y;

		try {
			walltexture = ImageIO.read(new File("Resources/Images/Light wall.png"));
			} catch(IOException ex) {
			System.out.println("image load failed: Light wall");
		}

	}
	public void Texture2(int x,int y) {
		this.x = x;
		this.y = y;

		try {
			walltexture = ImageIO.read(new File("Resources/Images/texture2.png"));
			} catch(IOException ex) {
			System.out.println("image load texture2.png load failed: texture2");
		}

	}
	
	public void Gatetexture(int x,int y) {
		this.x = x;
		this.y = y;

		try {
			if (upright) {
				walltexture = ImageIO.read(new File("Resources\\Images\\GatewayVertical(50x50).png"));
			} else {
				walltexture = ImageIO.read(new File("Resources\\\\Images\\\\GatewayHorizontal(50x50).png"));
			}
			} catch(IOException ex) {
			System.out.println("image load failed: GatewayVertical");
		}
	}
	

	Block(int x,int y,Buttontype type) {
		this.x = x;
		this.y = y;
		this.type = type;
		int place;
		try {
			if(type.equals(Buttontype.Left)) {place = 0;}
			else if (type.equals(Buttontype.Middle)) {place = 1;}
			else {place = 2;}
			buttontetexture[0] = ImageIO.read(new File("Resources/Images/buttonUnpressed"+Integer.toString(place)+".png"));
			buttontetexture[1] = ImageIO.read(new File("Resources/Images/buttonPressed"+Integer.toString(place)+".png"));
			} catch(IOException ex) {
			System.out.println("image load failed: Button");
		}
		
	}


	
	Block(int x, int y,int width,int height) {
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
		
		Texture1(x,y);
		for (int i=0; i<width/50;i++) {
			for (int j=0; j<height/50;j++) {
			Games.level.add(new Block(x+i*50,y+j*50,0,50));
			}
		}
		
	}
	Block(int x, int y,int width,int height,Blocktype special) {
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
		
		this.special = special;
		if (special == Blocktype.Endzone) {//finish, end of level
			this.color = Colors.nuclearGreen;
			portalable = false;
			try {finish = ImageIO.read(new File("Resources/Images/Finish.png"));
				} catch(IOException ex) {System.out.println("image load failed: Finish");}
		} else if (special == Blocktype.Lava) {//lava, kills Chell
			Lava(x,y);
			for (int i=0; i<width/50;i++) {
				Games.level.add(new Block(x+i*50,y,0,50,Blocktype.Lava));
				portalable = false;
			}
		
			
		} else if (special== Blocktype.Allergic) {//floors that don't take portals
			Texture2(x,y);
			for (int i=0; i<width/50;i++) {
				for (int j=0; j<height/50;j++) {
					Games.level.add(new Block(x+i*50,y+j*50,0,50,Blocktype.Allergic));
				}
			}
			portalable = false;
		} else if (special == Blocktype.Button) {//it's a button
			portalable = false;
			Games.level.add(new Block(x,y,Buttontype.Left));
			for(int i=0;i<(width-20)/30;i++) {
				Games.level.add(new Block(x+10+i*30,y,Buttontype.Middle));
			}
			if(!((width-20)%30 == 0)) {
				Games.level.add(new Block(x+width-40,y,Buttontype.Middle));
			}
			Games.level.add(new Block(x+width-10,y,Buttontype.Right));
		} else if (special == Blocktype.ButtonListener) {//changes if isOnButton is active
			if (height>width) {
				this.upright = true;
			} else {
				this.upright = false;
			}
			Games.level.add(new Block(x,y,width,height,upright));
	}
	}
		
	

	Block(int x, int y,int width,int height,boolean upright) {
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
		this.upright = upright;
		this.special = Blocktype.ButtonListener;
		Gatetexture(x,y);
		for (int i=0; i<height/50;i++) {
			for (int j=0;j<width/50;j++) {
				Games.level.add(new Block(x+j*50,y+i*50,0,0,upright));
				}
			}
		portalable = false;
		}
	
	public Direction intersect(Point point,int targetheight) {
		if (point.y+targetheight <= y) {
			return Direction.Up;
		} else if (point.y >= y+height) {
			return Direction.Down;
		} else if (point.x < x+width/2) {
			return Direction.Left;
		} else {
			return Direction.Right;
		}
	}
	
	public void draw(Graphics g,int tick) {
		if (special.equals(Blocktype.ButtonListener) && Mainpanel.someoneOnButton) {}
		else if(special.equals(Blocktype.Button)) {}
		else if(type.equals(Buttontype.Left)||type.equals(Buttontype.Middle)||type.equals(Buttontype.Right)) {
			int pressed = 0;
			if(Mainpanel.someoneOnButton) {
				pressed = 1;
			}
			g.drawImage(buttontetexture[pressed],x,y-5+5*pressed,null);
			
		}
		else if (special.equals(Blocktype.Lava)) {		
			if((tick-time) % 2 == 0) {
				gifcounter++;
			}
			if (gifcounter >= 25) {
				gifcounter = 0;
				time = tick;
			}
			g.drawImage(lavagif[gifcounter],x,y,null);
		} else if (color.equals(Colors.lightGrey)) {
			g.drawImage(walltexture, x, y, null);
		} else if(special.equals(Blocktype.Endzone)) {
			g.drawImage(finish,x+width*2/7,y-49,null);
			g.setColor(color);
			g.fillRect(x, y, width, height);
		} else {
		g.setColor(color);
		g.fillRect(x, y, width, height);
		}
	}
	
}
