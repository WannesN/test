package Portal2D;

import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;

public class Person extends Character{
	final int height = 50, width = 30; //heigth en width of sprite
	final int personwalkingspeed = 5;
	int jumpingspeed = 5;
	boolean jumped = false;	
	
	public Person(int x,int y) {
		super(x, y);
		super.width = width;
		super.height = height;
		super.midx = (int) x + height / 2;
		super.midy = (int) y + width / 2;
		super.walkingspeed = personwalkingspeed;
		
		BufferedImage[] imagelist = new BufferedImage[9];
		try {
			imagelist[1] = ImageIO.read(Person.class.getResource("/Images/standingR(30x50).png"));
			imagelist[2] = ImageIO.read(Person.class.getResource("/Images/running1R(34x43).png"));
			imagelist[3] = ImageIO.read(Person.class.getResource("/Images/running2R(44x44).png"));			
			imagelist[4] = ImageIO.read(Person.class.getResource("/Images/running3R(46x46).png"));	
			imagelist[5] = ImageIO.read(Person.class.getResource("/Images/standingL(30x50).png"));
			imagelist[6] = ImageIO.read(Person.class.getResource("/Images/running1L(34x43).png"));
			imagelist[7] = ImageIO.read(Person.class.getResource("/Images/running2L(44x44).png"));			
			imagelist[8] = ImageIO.read(Person.class.getResource("/Images/running3L(46x46).png"));	
			imagelist[0] = imagelist[1];
			
			
			/* image dimensions:
			 * all Person sprites: (30*50)
			 */
			
		} catch(IOException ex) {
			System.out.println("personimage load failed");
		}
		super.imagelist = imagelist;
	}

	public void personmove(Portal Bportal,Portal Oportal, int tick,ArrayList<Block> blocklistactive ) {
		if (!won && alive && !Mainpanel.paused) {
			Direction direction = move(Bportal,Oportal,tick,blocklistactive);
			if (direction == Direction.Left && ((moveR || moveL))) {
				speedx = 0;
			} else if (direction == Direction.Right && ((moveR || moveL))) {
				speedx = 0;
			}
			if (jumped) {
				jumped = false;
				super.speedy = -jumpingspeed;			
			}
		}
	}
	
	public void moveset(String direction) { //this method processes button presses
		boolean changed = false;
		if (direction == "right") {
			moveR = true;
			imagelist[0] = imagelist[1];
		}
		if (direction == "left") {
			moveL = true;
			if (!changed) {
				imagelist[0] = imagelist[4];
			}
		}
		if (direction == "up" & isOnFloor) {
			jumped = true;
		}
		if (direction == "down")
			speedx = 0;
	}
	
	public void stop(String direction) { //button releases
		if (direction == "right") {
			moveR = false;
			imagelist[0] = imagelist[1];
		}
		if (direction == "left") {
			moveL = false;
			imagelist[0] = imagelist[5];
		}
		if (Math.abs(speedx) <= 5 ) {
			speedx = 0;
		}
	}

	public ArrayList<Point> shoot(int mouseX, int mouseY,int mousebutton,Portal Oportal, Portal Bportal,ArrayList<Block> blocklistactive) { //shooting code
		ArrayList<Point> answ = new ArrayList<Point>();
		Portal activeportal = null;
		Portal otherportal = null;
		SoundManager.getSoundManager().play("portal_gun_2.wav");
		if (mousebutton == 1) {
			activeportal = Bportal;
			otherportal = Oportal; }
		else if (mousebutton == 3) {
			activeportal = Oportal;
			otherportal = Bportal; }
		boolean hit = false; // will let now if a hitbox has been hit, stopping the while loop
		boolean inverted = false; //will let new whether to increment/decrement x or y coords
		double bulletX = midx,bulletY = midy; //bullet starts at middle if character
		double prevBulletX,prevBulletY;
		double rico = ((double)mouseY -(double)midy)/((double)mouseX-(double)midx);
		if (Math.abs(rico) > 1) {
			rico = Math.pow(rico, -1);
			inverted = true;
		}
		while (!(hit || Tools.outOfBounds((int)bulletX, (int)bulletY))) {
			/* This code draws a line between the center of the person and the point that was clicked. 
			 * We calculate the rico using the coordinates of both points, then we decide to either 
			 * increment the x or y value. If the rico is equal or below 1 we increment x otherwise 
			 * we increment y and invert the rico. This is done so we won't make steps too big to miss
			 * a hitbox. After each step we check if the line has hit a wall. If it has we spawn a portal
			 * at the intersect point.*/
			prevBulletX = bulletX;
			prevBulletY = bulletY;
			
			if (!inverted) {
				if (mouseX > midx) {
					bulletX += 15;
					bulletY += 15*rico;
				} else if (mouseX < midx) {
					bulletX -= 15;
					bulletY -= 15*rico;
				}
			} else {
				if (mouseY > midy) {
					bulletY += 15;
					bulletX += 15*rico;
				} else if (mouseY < midy) {
					bulletY -= 15;
					bulletX -= 15*rico;
				}
			}
			answ.add(new Point((int)bulletX,(int)bulletY));
			for (int i = 0; i <blocklistactive.size();i++ ) {
				if(!(blocklistactive.get(i).special == Blocktype.ButtonListener && Mainpanel.someoneOnButton)) {
					if (Tools.pointIntersect((int)bulletX,(int) bulletY, blocklistactive.get(i).x, blocklistactive.get(i).y, blocklistactive.get(i).width, blocklistactive.get(i).height)) {
						Direction orientation = blocklistactive.get(i).intersect(new Point(prevBulletX,prevBulletY),0); 
						hit = true;
						if (blocklistactive.get(i).portalable == false) {//if you can't put a portal on this floor
							break;
						} else if (orientation == Direction.Up) {
							activeportal.spawn((int)bulletX,blocklistactive.get(i).y,orientation,blocklistactive.get(i),otherportal);
						} else if (orientation == Direction.Down) {
							activeportal.spawn((int)bulletX,blocklistactive.get(i).y+blocklistactive.get(i).height,orientation,blocklistactive.get(i),otherportal);
						} else if (orientation == Direction.Right) {
							activeportal.spawn(blocklistactive.get(i).x+blocklistactive.get(i).width,(int)bulletY,orientation,blocklistactive.get(i),otherportal);
						} else if (orientation == Direction.Left) {
							activeportal.spawn(blocklistactive.get(i).x,(int)bulletY,orientation,blocklistactive.get(i),otherportal);
						}
					}
				}
			}
		}
		return answ;	
	}
	
	public void persondraw(Graphics g) {
		g.drawImage(imagelist[0],x,y,null); //simple draw method
		if (won) {
	        	g.setFont(new Font("verdana", 3, 100));
	        	g.setColor(Colors.lightGrey);
	        	g.drawString("You won",200,300);
	        	g.setFont(new Font("verdana", 2, 30));
	        	g.drawString("Press Enter to continue", 200, 350);
	        	//System.out.println("To go to the next level, press enter.");
	        	//enter.hasNextLine();
	        }
	        if (!alive) {
	        	g.setFont(new Font("arial", 1, 100));
	        	g.setColor(Colors.lavaRed);
	        	g.drawString("You died", 200, 300);
	        	g.setFont(new Font("verdana", 2, 30));
	        	g.drawString("Press Enter to restart", 200, 350);
	        	//System.out.println("To revive, press enter.");
	        	//enter.hasNextLine();
	        	//reset();
	        	//alive = true;
	        }
	}
}





	

